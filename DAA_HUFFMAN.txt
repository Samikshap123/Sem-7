import java.util.PriorityQueue;
import java.util.Scanner;

class Node implements Comparable<Node> {
    int freq;
    String symbol;
    Node left;
    Node right;
    String huff;

    public Node(int freq, String symbol, Node left, Node right) {
        this.freq = freq;
        this.symbol = symbol;
        this.left = left;
        this.right = right;
        this.huff = "";
    }

    @Override
    public int compareTo(Node nxt) {
        return Integer.compare(this.freq, nxt.freq);
    }
}

class Main {
    public static void printNodes(Node node, String val) {
        String newVal = val + node.huff;
        if (node.left != null) {
            printNodes(node.left, newVal);
        }
        if (node.right != null) {
            printNodes(node.right, newVal);
        }
        if (node.left == null && node.right == null) {
            System.out.println(node.symbol + " -> " + newVal);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter characters (separated by spaces): ");
        String[] chars = scanner.nextLine().split(" ");

        System.out.print("Enter frequencies (separated by spaces): ");
        String[] frequencies = scanner.nextLine().split(" ");
        int[] freq = new int[frequencies.length];
        for (int i = 0; i < frequencies.length; i++) {
            freq[i] = Integer.parseInt(frequencies[i]);
        }

        PriorityQueue<Node> nodes = new PriorityQueue<>();
        for (int i = 0; i < chars.length; i++) {
            nodes.add(new Node(freq[i], chars[i], null, null));
        }

        while (nodes.size() > 1) {
            Node left = nodes.poll();
            Node right = nodes.poll();
            left.huff = "0";
            right.huff = "1";
            Node newNode = new Node(left.freq + right.freq, left.symbol + right.symbol, left, right);
            nodes.add(newNode);
        }

        Node root = nodes.poll();
        printNodes(root, "");
    }
}
